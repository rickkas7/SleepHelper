<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_sleep_helper" kind="class" language="C++" prot="public">
    <compoundname>SleepHelper</compoundname>
    <includes refid="_sleep_helper_8h" local="no">SleepHelper.h</includes>
    <innerclass refid="class_sleep_helper_1_1_app_callback" prot="public">SleepHelper::AppCallback</innerclass>
    <innerclass refid="class_sleep_helper_1_1_cloud_settings_file" prot="public">SleepHelper::CloudSettingsFile</innerclass>
    <innerclass refid="class_sleep_helper_1_1_event_combiner" prot="public">SleepHelper::EventCombiner</innerclass>
    <innerclass refid="class_sleep_helper_1_1_persistent_data" prot="public">SleepHelper::PersistentData</innerclass>
    <innerclass refid="class_sleep_helper_1_1_persistent_data_base" prot="public">SleepHelper::PersistentDataBase</innerclass>
    <innerclass refid="class_sleep_helper_1_1_persistent_data_file" prot="public">SleepHelper::PersistentDataFile</innerclass>
    <innerclass refid="class_sleep_helper_1_1_settings_file" prot="public">SleepHelper::SettingsFile</innerclass>
    <innerclass refid="class_sleep_helper_1_1_should_connect_app_callback" prot="public">SleepHelper::ShouldConnectAppCallback</innerclass>
    <innerclass refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex" prot="public">SleepHelper::SleepHelperRecursiveMutex</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_sleep_helper_1a7a8fcf09815441b0de5478f492cf67aa" prot="public" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref></type>
        <definition>SettingsFile SleepHelper::settingsFile</definition>
        <argsstring></argsstring>
        <name>settingsFile</name>
        <briefdescription>
<para>Class for managing the settings file. </para>
        </briefdescription>
        <detaileddescription>
<para>The settings file is stored as a file in the flash file system and is a JSON object that is flat (one level deep, no sub-objects or arrays). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1337" column="18" bodyfile="src/SleepHelper.h" bodystart="1337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a47b6cf4b7036b8ab39b55e0aa6278f6b" prot="public" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_persistent_data" kindref="compound">PersistentData</ref></type>
        <definition>PersistentData SleepHelper::persistentData</definition>
        <argsstring></argsstring>
        <name>persistentData</name>
        <briefdescription>
<para>Class for managing persistent data. </para>
        </briefdescription>
        <detaileddescription>
<para>Persistent data is stored as a file in the flash file system, </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1344" column="20" bodyfile="src/SleepHelper.h" bodystart="1344" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_sleep_helper_1a5ab8265462fb2d359ce425be693aaed9" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; SystemSleepConfiguration &amp;, std::chrono::milliseconds &amp; &gt;</type>
        <definition>AppCallback&lt;SystemSleepConfiguration &amp;, std::chrono::milliseconds&amp;&gt; SleepHelper::sleepConfigurationFunctions</definition>
        <argsstring></argsstring>
        <name>sleepConfigurationFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1388" column="17" bodyfile="src/SleepHelper.h" bodystart="1388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a841620a67c0f98bfee4e9808a8226c3d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; const SystemSleepResult &amp; &gt;</type>
        <definition>AppCallback&lt;const SystemSleepResult &amp;&gt; SleepHelper::wakeFunctions</definition>
        <argsstring></argsstring>
        <name>wakeFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1390" column="17" bodyfile="src/SleepHelper.h" bodystart="1390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1aab6eb4ae918d1cc5f8d3b9f8de4ef233" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref></type>
        <definition>AppCallback SleepHelper::setupFunctions</definition>
        <argsstring></argsstring>
        <name>setupFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1395" column="6" bodyfile="src/SleepHelper.h" bodystart="1395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a4aa8bc1eef9fc012ace84e22a0c6dd03" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref></type>
        <definition>AppCallback SleepHelper::loopFunctions</definition>
        <argsstring></argsstring>
        <name>loopFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1397" column="6" bodyfile="src/SleepHelper.h" bodystart="1397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1aa89c7123a48644c2479c67a96c496e4c" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; system_tick_t &gt;</type>
        <definition>AppCallback&lt;system_tick_t&gt; SleepHelper::sleepReadyFunctions</definition>
        <argsstring></argsstring>
        <name>sleepReadyFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1400" column="17" bodyfile="src/SleepHelper.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a4dc8cbdd5b7a7ef3d292f3c225011e71" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_should_connect_app_callback" kindref="compound">ShouldConnectAppCallback</ref></type>
        <definition>ShouldConnectAppCallback SleepHelper::shouldConnectFunctions</definition>
        <argsstring></argsstring>
        <name>shouldConnectFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1402" column="30" bodyfile="src/SleepHelper.h" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a790a2897f52fc755f752b1f76af94994" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref></type>
        <definition>AppCallback SleepHelper::wakeOrBootFunctions</definition>
        <argsstring></argsstring>
        <name>wakeOrBootFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1405" column="6" bodyfile="src/SleepHelper.h" bodystart="1405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1adfe77dceb8caff70bdba400abb3b2533" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; bool &gt;</type>
        <definition>AppCallback&lt;bool&gt; SleepHelper::sleepOrResetFunctions</definition>
        <argsstring></argsstring>
        <name>sleepOrResetFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1407" column="17" bodyfile="src/SleepHelper.h" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a775b5b367463b986c8c1c929adccf97f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; system_tick_t &gt;</type>
        <definition>AppCallback&lt;system_tick_t&gt; SleepHelper::maximumTimeToConnectFunctions</definition>
        <argsstring></argsstring>
        <name>maximumTimeToConnectFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1409" column="17" bodyfile="src/SleepHelper.h" bodystart="1409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1ac49ebdc52fd4d78f06fe135f7ed3d598" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref></type>
        <definition>AppCallback SleepHelper::noConnectionFunctions</definition>
        <argsstring></argsstring>
        <name>noConnectionFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1411" column="6" bodyfile="src/SleepHelper.h" bodystart="1411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1ab99d26318ff9514a6db29adeb87bb18b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref></type>
        <definition>AppCallback SleepHelper::whileConnectedFunctions</definition>
        <argsstring></argsstring>
        <name>whileConnectedFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1413" column="6" bodyfile="src/SleepHelper.h" bodystart="1413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a2555c5f23e97e7ff7c46eb6b69fd785b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref></type>
        <definition>EventCombiner SleepHelper::wakeEventFunctions</definition>
        <argsstring></argsstring>
        <name>wakeEventFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1415" column="19" bodyfile="src/SleepHelper.h" bodystart="1415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a8780ebc89a75918a1f4146b65185a295" prot="protected" static="no" mutable="no">
        <type>LocalTimeSchedule</type>
        <definition>LocalTimeSchedule SleepHelper::sleepSchedule</definition>
        <argsstring></argsstring>
        <name>sleepSchedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1417" column="23" bodyfile="src/SleepHelper.h" bodystart="1417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a7d9b5b4ab92962f00bc98e339278a370" prot="protected" static="no" mutable="no">
        <type>LocalTimeSchedule</type>
        <definition>LocalTimeSchedule SleepHelper::publishSchedule</definition>
        <argsstring></argsstring>
        <name>publishSchedule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1418" column="23" bodyfile="src/SleepHelper.h" bodystart="1418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a9cda0d070ecd63b3df79215cbd2bd300" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(<ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;)&gt;</type>
        <definition>std::function&lt;void(SleepHelper&amp;)&gt; SleepHelper::stateHandler</definition>
        <argsstring></argsstring>
        <name>stateHandler</name>
        <initializer>= &amp;SleepHelper::stateHandlerStart</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1421" column="19" bodyfile="src/SleepHelper.h" bodystart="1421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1ad187ab04c4dfc6516c8ab23463487a83" prot="protected" static="no" mutable="no">
        <type>system_tick_t</type>
        <definition>system_tick_t SleepHelper::connectAttemptStartMillis</definition>
        <argsstring></argsstring>
        <name>connectAttemptStartMillis</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1423" column="19" bodyfile="src/SleepHelper.h" bodystart="1423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1a27b8cffe89790c41d4e0f78f6e53ad15" prot="protected" static="no" mutable="no">
        <type>system_tick_t</type>
        <definition>system_tick_t SleepHelper::connectedStartMillis</definition>
        <argsstring></argsstring>
        <name>connectedStartMillis</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1424" column="19" bodyfile="src/SleepHelper.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1ae26d1ab394fe449c9cfb4c9755dbd226" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool SleepHelper::outOfMemory</definition>
        <argsstring></argsstring>
        <name>outOfMemory</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1425" column="10" bodyfile="src/SleepHelper.h" bodystart="1425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1ad74eb51eefc7205b133be4fa58e32718" prot="protected" static="no" mutable="no">
        <type>Logger</type>
        <definition>Logger SleepHelper::appLog</definition>
        <argsstring></argsstring>
        <name>appLog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1428" column="12" bodyfile="src/SleepHelper.h" bodystart="1428" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_sleep_helper_1a96e621d2b5d04ae764605bc5bf8ec185" prot="protected" static="yes" mutable="no">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> *</type>
        <definition>SleepHelper * SleepHelper::_instance</definition>
        <argsstring></argsstring>
        <name>_instance</name>
        <briefdescription>
<para>Singleton instance of this class. </para>
        </briefdescription>
        <detaileddescription>
<para>The object pointer to this class is stored here. It&apos;s NULL at system boot. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1435" column="24" bodyfile="src/SleepHelper.h" bodystart="1435" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::instance</definition>
        <argsstring>()</argsstring>
        <name>instance</name>
        <briefdescription>
<para>Gets the singleton instance of this class, allocating it if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref> to instantiate the singleton. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="26" column="24" bodyfile="src/SleepHelper.cpp" bodystart="9" bodyend="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sleep_helper_1a4a1cebe9ec345713091bd3f623cb6985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withSleepConfigurationFunction</definition>
        <argsstring>(std::function&lt; bool(SystemSleepConfiguration &amp;, std::chrono::milliseconds &amp;)&gt; fn)</argsstring>
        <name>withSleepConfigurationFunction</name>
        <param>
          <type>std::function&lt; bool(SystemSleepConfiguration &amp;, std::chrono::milliseconds &amp;)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1075" column="17" bodyfile="src/SleepHelper.h" bodystart="1075" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1ac633b93687b39b6b9e5ce18caa205dff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withWakeFunction</definition>
        <argsstring>(std::function&lt; bool(const SystemSleepResult &amp;)&gt; fn)</argsstring>
        <name>withWakeFunction</name>
        <param>
          <type>std::function&lt; bool(const SystemSleepResult &amp;)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1080" column="17" bodyfile="src/SleepHelper.h" bodystart="1080" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1abf9f04100075adfc2a5ccd27a14db7de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withSetupFunction</definition>
        <argsstring>(std::function&lt; bool()&gt; fn)</argsstring>
        <name>withSetupFunction</name>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1086" column="17" bodyfile="src/SleepHelper.h" bodystart="1086" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a015eb8ec460526d1dd81b4859823aa7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withLoopFunction</definition>
        <argsstring>(std::function&lt; bool()&gt; fn)</argsstring>
        <name>withLoopFunction</name>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1091" column="17" bodyfile="src/SleepHelper.h" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1ac73ffa2b764f716d9af9c7840e7c30e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withSleepReadyFunction</definition>
        <argsstring>(std::function&lt; bool(system_tick_t)&gt; fn)</argsstring>
        <name>withSleepReadyFunction</name>
        <param>
          <type>std::function&lt; bool(system_tick_t)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Determine if it&apos;s OK to sleep now, when in connected state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>&amp;</para>
</simplesect>
The sleep ready function prototype is:</para>
<para>bool callback(system_tick_t connecteTimeMs)</para>
<para>Return true if your situation is OK to sleep now. This does not guaranteed that sleep will actually occur, because there can be many sleep ready functions and other calculations.</para>
<para>Return false if you still have things to do before it&apos;s OK to sleep.</para>
<para>This callback is only called when connected. Scanning the list stops when the first callback return false, so you should not use this callback for periodic actions. Use withWhileConnectedFunction() instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1115" column="17" bodyfile="src/SleepHelper.h" bodystart="1115" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1aabfb4418f8fb006b50d8efff7edbee4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withShouldConnectFunction</definition>
        <argsstring>(std::function&lt; bool(int &amp;connectConviction, int &amp;noConnectConviction)&gt; fn)</argsstring>
        <name>withShouldConnectFunction</name>
        <param>
          <type>std::function&lt; bool(int &amp;connectConviction, int &amp;noConnectConviction)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1120" column="17" bodyfile="src/SleepHelper.h" bodystart="1120" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a75d49d150a195cdd7ab8b9d01ef462f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withWakeOrBootFunction</definition>
        <argsstring>(std::function&lt; bool()&gt; fn)</argsstring>
        <name>withWakeOrBootFunction</name>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1125" column="17" bodyfile="src/SleepHelper.h" bodystart="1125" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a0d2ea01e4c0d13adc81c038b33ea8871" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withWakeEventFunction</definition>
        <argsstring>(std::function&lt; bool(JSONWriter &amp;, int &amp;)&gt; fn)</argsstring>
        <name>withWakeEventFunction</name>
        <param>
          <type>std::function&lt; bool(JSONWriter &amp;, int &amp;)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Add a callback to add to an event published on wake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>&amp;</para>
</simplesect>
This is used to efficiently publish data on each full wake with cloud connect. You can register a callback to add data to a JSON object. There is a priority ordering and the ability to split JSON data across multiple publishes if it does not fit, or discard unimportant data. This allows multiple parts of your code to efficiently combine data into a single publish without having to worry about size limits.</para>
<para>Wake event functions are only called when a full cloud connect is already planned, you can influence this using a shouldConnect callback.</para>
<para>The callback function has this prototype:</para>
<para>bool callback(JSONWriter &amp;writer, int &amp;priority)</para>
<para>The return value is ignored; you should return true.</para>
<para>writer is the JSONWriter to store the data into priority should be set to a value from 1 to 100. If you leave it at zero your data will not be saved!</para>
<para>Items are added to the event in priority order, largest first.</para>
<para>If you have a priority &lt; 50 and the event is full, then your data will be discarded to avoid generating another event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1159" column="17" bodyfile="src/SleepHelper.h" bodystart="1159" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a48f3f028336fae8f9b7b56335a2af98f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withSleepOrResetFunction</definition>
        <argsstring>(std::function&lt; bool(bool)&gt; fn)</argsstring>
        <name>withSleepOrResetFunction</name>
        <param>
          <type>std::function&lt; bool(bool)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Adds a function to be called right before sleep or reset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function or lambda to call. The bool result is ignored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>&amp;</para>
</simplesect>
It&apos;s common to put code to power down peripherals and stop an external hardware watchdog. This should only be used for quick operations. You will already be disconnected from the cloud and network when this function is called. You cannot stop the reset or sleep process from this callback.</para>
<para>The order of callbacks is sleepOrReset, sleepConfiguration, then the device goes to sleep. When the device wakes, the wake callback is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1179" column="17" bodyfile="src/SleepHelper.h" bodystart="1179" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a6e5222c45e18155a9de17cb4350a8fbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withMaximumTimeToConnectFunction</definition>
        <argsstring>(std::function&lt; bool(system_tick_t ms)&gt; fn)</argsstring>
        <name>withMaximumTimeToConnectFunction</name>
        <param>
          <type>std::function&lt; bool(system_tick_t ms)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1184" column="17" bodyfile="src/SleepHelper.h" bodystart="1184" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1ab8889f82083eb26229ac096907218766" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withMaximumTimeToConnect</definition>
        <argsstring>(std::chrono::milliseconds timeMs)</argsstring>
        <name>withMaximumTimeToConnect</name>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>timeMs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1189" column="17" bodyfile="src/SleepHelper.h" bodystart="1189" bodyend="1193"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a147c91d776b0968268e148b1be6958d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withNoConnectionFunction</definition>
        <argsstring>(std::function&lt; bool()&gt; fn)</argsstring>
        <name>withNoConnectionFunction</name>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Register a callback for when in the no connection state. </para>
        </briefdescription>
        <detaileddescription>
<para>If the should connect handlers indicate that a cloud connection should not be attempted, for example if we&apos;re in a situation we wake briefly to sample a sensor but want to aggregate values before connecting to the cloud to avoid connecting too frequently, then the no connect handler provides time for your application to do thing before going to sleep. If you return true from your callback, then the device will continue to stay awake.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1208" column="17" bodyfile="src/SleepHelper.h" bodystart="1208" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a0220bfedac1060b8246dff582426cb35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withWhileConnectedFunction</definition>
        <argsstring>(std::function&lt; bool()&gt; fn)</argsstring>
        <name>withWhileConnectedFunction</name>
        <param>
          <type>std::function&lt; bool()&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1213" column="17" bodyfile="src/SleepHelper.h" bodystart="1213" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a68ae8f2760ead87883343d1d418b977c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withMinimumConnectedTime</definition>
        <argsstring>(std::chrono::milliseconds timeMs)</argsstring>
        <name>withMinimumConnectedTime</name>
        <param>
          <type>std::chrono::milliseconds</type>
          <declname>timeMs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1218" column="17" bodyfile="src/SleepHelper.h" bodystart="1218" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a805abcdae1dd42163191a9edcb69660f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withSettingChangeFunction</definition>
        <argsstring>(std::function&lt; bool(const char *)&gt; fn)</argsstring>
        <name>withSettingChangeFunction</name>
        <param>
          <type>std::function&lt; bool(const char *)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1224" column="17" bodyfile="src/SleepHelper.h" bodystart="1224" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a69d89d9b33b53b09df85580c20e8dfd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withMinimumSoC</definition>
        <argsstring>(float minSoC, int conviction=100)</argsstring>
        <name>withMinimumSoC</name>
        <param>
          <type>float</type>
          <declname>minSoC</declname>
        </param>
        <param>
          <type>int</type>
          <declname>conviction</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1251" column="17" bodyfile="src/SleepHelper.h" bodystart="1251" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1aa293cbbab40d07245d2006a71f696e6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::withTimeConfig</definition>
        <argsstring>(const char *tzConfig)</argsstring>
        <name>withTimeConfig</name>
        <param>
          <type>const char *</type>
          <declname>tzConfig</declname>
        </param>
        <briefdescription>
<para>Sets the time configuration string for local time calculations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tzConfig</parametername>
</parameternamelist>
<parameterdescription>
<para>Timezone and daylight saving settings, POSIX timezone rule string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>&amp;</para>
</simplesect>
If you do not call this, all time calculation will be done at UTC.</para>
<para>For the United States east coast, the configuration string is:</para>
<para><programlisting><codeline><highlight class="normal">EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
</programlisting></para>
<para>What this means is:</para>
<para><itemizedlist>
<listitem><para>&quot;EST&quot; is the standard time timezone name</para>
</listitem><listitem><para>5 is the offset from UTC in hours. Actually -5, as the sign is backwards from the way it&apos;s normally expressed. And it could be hours and minutes.</para>
</listitem><listitem><para>&quot;EDT&quot; is the daylight saving time timezone name</para>
</listitem><listitem><para>&quot;M3.2.0&quot; is when DST starts. Month 3 (March), 2nd week, 0 = Sunday</para>
</listitem><listitem><para>&quot;2:00:00&quot; transition to DST at 2:00 AM local time</para>
</listitem><listitem><para>&quot;M11.1.0&quot; transition back to standard time November, 1st week, on Sunday</para>
</listitem><listitem><para>&quot;2:00:00&quot; transition back to standard time at 2:00 AM local time</para>
</listitem></itemizedlist>
</para>
<para>Some examples:</para>
<para><table rows="9" cols="2"><row>
<entry thead="yes" align='left'><para>Location   </para>
</entry><entry thead="yes" align='left'><para>Timezone Configuration    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>New York   </para>
</entry><entry thead="no" align='left'><para>&quot;EST5EDT,M3.2.0/02:00:00,M11.1.0/02:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Chicago   </para>
</entry><entry thead="no" align='left'><para>&quot;CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Denver   </para>
</entry><entry thead="no" align='left'><para>&quot;MST7MDT,M3.2.0/2:00:00,M11.1.0/2:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Phoenix   </para>
</entry><entry thead="no" align='left'><para>&quot;MST7&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Los Angeles   </para>
</entry><entry thead="no" align='left'><para>&quot;PST8PDT,M3.2.0/2:00:00,M11.1.0/2:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>London   </para>
</entry><entry thead="no" align='left'><para>&quot;BST0GMT,M3.5.0/1:00:00,M10.5.0/2:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Sydney, Australia   </para>
</entry><entry thead="no" align='left'><para>&quot;AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00&quot;    </para>
</entry></row>
<row>
<entry thead="no" align='left'><para>Adelaide, Australia   </para>
</entry><entry thead="no" align='left'><para>&quot;ACST-9:30ACDT,M10.1.0/02:00:00,M4.1.0/03:00:00&quot;   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1311" column="17" bodyfile="src/SleepHelper.h" bodystart="1311" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1aa55dc9d8e2627cf697ac1bd6a1db9c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>Perform setup operations; call this from global application <ref refid="class_sleep_helper_1aa55dc9d8e2627cf697ac1bd6a1db9c2d" kindref="member">setup()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>You typically use <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref>.<ref refid="class_sleep_helper_1aa55dc9d8e2627cf697ac1bd6a1db9c2d" kindref="member">setup()</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1322" column="10" bodyfile="src/SleepHelper.cpp" bodystart="27" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a8dac8eec4a7beb5a0ae8e6060e51764e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para>Perform application loop operations; call this from global application <ref refid="class_sleep_helper_1a8dac8eec4a7beb5a0ae8e6060e51764e" kindref="member">loop()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>You typically use <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref>.<ref refid="class_sleep_helper_1a8dac8eec4a7beb5a0ae8e6060e51764e" kindref="member">loop()</ref>; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1329" column="10" bodyfile="src/SleepHelper.cpp" bodystart="48" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sleep_helper_1a89399adf4c228cd258637ae45465418f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::SleepHelper</definition>
        <argsstring>()</argsstring>
        <name>SleepHelper</name>
        <briefdescription>
<para>The constructor is protected because the class is a singleton. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref> to instantiate the singleton. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1352" column="5" bodyfile="src/SleepHelper.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1af1640a7ac7d7ba028f468d14d495cbfb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>SleepHelper::~SleepHelper</definition>
        <argsstring>()</argsstring>
        <name>~SleepHelper</name>
        <briefdescription>
<para>The destructor is protected because the class is a singleton and cannot be deleted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1357" column="13" bodyfile="src/SleepHelper.cpp" bodystart="23" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1af61ceb6581809f8166c32e1eb5bbda92" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::SleepHelper</definition>
        <argsstring>(const SleepHelper &amp;)=delete</argsstring>
        <name>SleepHelper</name>
        <param>
          <type>const <ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class is a singleton and cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1362" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a4c086ef306238bde738d7837c0e52bbb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        <definition>SleepHelper &amp; SleepHelper::operator=</definition>
        <argsstring>(const SleepHelper &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class is a singleton and cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1367" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a2652c1019e156dbcaa5b1fa83a59f059" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::systemEventHandler</definition>
        <argsstring>(system_event_t event, int param)</argsstring>
        <name>systemEventHandler</name>
        <param>
          <type>system_event_t</type>
          <declname>event</declname>
        </param>
        <param>
          <type>int</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1370" column="10" bodyfile="src/SleepHelper.cpp" bodystart="59" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1ae458f2222f1fb920f5ea59976ec5f758" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerStart</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1374" column="10" bodyfile="src/SleepHelper.cpp" bodystart="95" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a16a9f4aba72174b61fd4a117c40c0151" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerConnectWait</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerConnectWait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1376" column="10" bodyfile="src/SleepHelper.cpp" bodystart="110" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a0ba6f6f8f9abfe688f507a0ca8aa058a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerConnected</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1378" column="10" bodyfile="src/SleepHelper.cpp" bodystart="126" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a671842ec813a228dee90ffa8bef692dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerReconnectWait</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerReconnectWait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1380" column="10" bodyfile="src/SleepHelper.cpp" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a3a773d6e7b996a7b37e9bac67caf2bdc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerNoConnection</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerNoConnection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1382" column="10" bodyfile="src/SleepHelper.cpp" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a551daa4717dfcaad8405f06e49d3e424" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerDisconnectBeforeSleep</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerDisconnectBeforeSleep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1384" column="10" bodyfile="src/SleepHelper.cpp" bodystart="165" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1a4cbc572eff1167e5e3dcd77aa0f7c7a4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::stateHandlerPrepareToSleep</definition>
        <argsstring>()</argsstring>
        <name>stateHandlerPrepareToSleep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1386" column="10" bodyfile="src/SleepHelper.cpp" bodystart="177" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="class_sleep_helper_1a7fd366a7d2fc5519300713a75675c3cd" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::systemEventHandlerStatic</definition>
        <argsstring>(system_event_t event, int param)</argsstring>
        <name>systemEventHandlerStatic</name>
        <param>
          <type>system_event_t</type>
          <declname>event</declname>
        </param>
        <param>
          <type>int</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1372" column="17" bodyfile="src/SleepHelper.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is a singleton; you do not create one as a global, on the stack, or with new.</para>
<para>From global application setup you must call: <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref>.<ref refid="class_sleep_helper_1aa55dc9d8e2627cf697ac1bd6a1db9c2d" kindref="member">setup()</ref>;</para>
<para>From global application loop you must call: <ref refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" kindref="member">SleepHelper::instance()</ref>.<ref refid="class_sleep_helper_1a8dac8eec4a7beb5a0ae8e6060e51764e" kindref="member">loop()</ref>; </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="11">
        <label>SleepHelper::AppCallback&lt; int &amp;, int &amp; &gt;</label>
        <link refid="class_sleep_helper_1_1_app_callback"/>
      </node>
      <node id="1">
        <label>SleepHelper</label>
        <link refid="class_sleep_helper"/>
        <childnode refid="2" relation="usage">
          <edgelabel>settingsFile</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>persistentData</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>loopFunctions</edgelabel>
          <edgelabel>noConnectionFunctions</edgelabel>
          <edgelabel>setupFunctions</edgelabel>
          <edgelabel>wakeOrBootFunctions</edgelabel>
          <edgelabel>whileConnectedFunctions</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>shouldConnectFunctions</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>wakeEventFunctions</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>_instance</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>SleepHelper::AppCallback&lt; Types &gt;</label>
        <link refid="class_sleep_helper_1_1_app_callback"/>
      </node>
      <node id="12">
        <label>SleepHelper::EventCombiner</label>
        <link refid="class_sleep_helper_1_1_event_combiner"/>
      </node>
      <node id="4">
        <label>SleepHelper::PersistentData</label>
        <link refid="class_sleep_helper_1_1_persistent_data"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>sleepHelperData</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>SleepHelper::PersistentData::SleepHelperData</label>
        <link refid="class_sleep_helper_1_1_persistent_data_1_1_sleep_helper_data"/>
      </node>
      <node id="6">
        <label>SleepHelper::PersistentDataBase</label>
        <link refid="class_sleep_helper_1_1_persistent_data_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>savedDataHeader</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>SleepHelper::PersistentDataBase::SavedDataHeader</label>
        <link refid="class_sleep_helper_1_1_persistent_data_base_1_1_saved_data_header"/>
      </node>
      <node id="5">
        <label>SleepHelper::PersistentDataFile</label>
        <link refid="class_sleep_helper_1_1_persistent_data_file"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SleepHelper::SettingsFile</label>
        <link refid="class_sleep_helper_1_1_settings_file"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>SleepHelper::ShouldConnectAppCallback</label>
        <link refid="class_sleep_helper_1_1_should_connect_app_callback"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>SleepHelper::SleepHelperRecursiveMutex</label>
        <link refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex"/>
      </node>
    </collaborationgraph>
    <location file="src/SleepHelper.h" line="19" column="1" bodyfile="src/SleepHelper.h" bodystart="19" bodyend="1437"/>
    <listofallmembers>
      <member refid="class_sleep_helper_1a96e621d2b5d04ae764605bc5bf8ec185" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>_instance</name></member>
      <member refid="class_sleep_helper_1ad74eb51eefc7205b133be4fa58e32718" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>appLog</name></member>
      <member refid="class_sleep_helper_1ad187ab04c4dfc6516c8ab23463487a83" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>connectAttemptStartMillis</name></member>
      <member refid="class_sleep_helper_1a27b8cffe89790c41d4e0f78f6e53ad15" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>connectedStartMillis</name></member>
      <member refid="class_sleep_helper_1ad424c11c0781ea2ebbdd96a43521ea06" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>instance</name></member>
      <member refid="class_sleep_helper_1a8dac8eec4a7beb5a0ae8e6060e51764e" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>loop</name></member>
      <member refid="class_sleep_helper_1a4aa8bc1eef9fc012ace84e22a0c6dd03" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>loopFunctions</name></member>
      <member refid="class_sleep_helper_1a775b5b367463b986c8c1c929adccf97f" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>maximumTimeToConnectFunctions</name></member>
      <member refid="class_sleep_helper_1ac49ebdc52fd4d78f06fe135f7ed3d598" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>noConnectionFunctions</name></member>
      <member refid="class_sleep_helper_1a4c086ef306238bde738d7837c0e52bbb" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>operator=</name></member>
      <member refid="class_sleep_helper_1ae26d1ab394fe449c9cfb4c9755dbd226" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>outOfMemory</name></member>
      <member refid="class_sleep_helper_1a47b6cf4b7036b8ab39b55e0aa6278f6b" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>persistentData</name></member>
      <member refid="class_sleep_helper_1a7d9b5b4ab92962f00bc98e339278a370" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>publishSchedule</name></member>
      <member refid="class_sleep_helper_1a7a8fcf09815441b0de5478f492cf67aa" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>settingsFile</name></member>
      <member refid="class_sleep_helper_1aa55dc9d8e2627cf697ac1bd6a1db9c2d" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>setup</name></member>
      <member refid="class_sleep_helper_1aab6eb4ae918d1cc5f8d3b9f8de4ef233" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>setupFunctions</name></member>
      <member refid="class_sleep_helper_1a4dc8cbdd5b7a7ef3d292f3c225011e71" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>shouldConnectFunctions</name></member>
      <member refid="class_sleep_helper_1a5ab8265462fb2d359ce425be693aaed9" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>sleepConfigurationFunctions</name></member>
      <member refid="class_sleep_helper_1a89399adf4c228cd258637ae45465418f" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>SleepHelper</name></member>
      <member refid="class_sleep_helper_1af61ceb6581809f8166c32e1eb5bbda92" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>SleepHelper</name></member>
      <member refid="class_sleep_helper_1adfe77dceb8caff70bdba400abb3b2533" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>sleepOrResetFunctions</name></member>
      <member refid="class_sleep_helper_1aa89c7123a48644c2479c67a96c496e4c" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>sleepReadyFunctions</name></member>
      <member refid="class_sleep_helper_1a8780ebc89a75918a1f4146b65185a295" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>sleepSchedule</name></member>
      <member refid="class_sleep_helper_1a9cda0d070ecd63b3df79215cbd2bd300" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandler</name></member>
      <member refid="class_sleep_helper_1a0ba6f6f8f9abfe688f507a0ca8aa058a" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerConnected</name></member>
      <member refid="class_sleep_helper_1a16a9f4aba72174b61fd4a117c40c0151" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerConnectWait</name></member>
      <member refid="class_sleep_helper_1a551daa4717dfcaad8405f06e49d3e424" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerDisconnectBeforeSleep</name></member>
      <member refid="class_sleep_helper_1a3a773d6e7b996a7b37e9bac67caf2bdc" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerNoConnection</name></member>
      <member refid="class_sleep_helper_1a4cbc572eff1167e5e3dcd77aa0f7c7a4" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerPrepareToSleep</name></member>
      <member refid="class_sleep_helper_1a671842ec813a228dee90ffa8bef692dc" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerReconnectWait</name></member>
      <member refid="class_sleep_helper_1ae458f2222f1fb920f5ea59976ec5f758" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>stateHandlerStart</name></member>
      <member refid="class_sleep_helper_1a2652c1019e156dbcaa5b1fa83a59f059" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>systemEventHandler</name></member>
      <member refid="class_sleep_helper_1a7fd366a7d2fc5519300713a75675c3cd" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>systemEventHandlerStatic</name></member>
      <member refid="class_sleep_helper_1a2555c5f23e97e7ff7c46eb6b69fd785b" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>wakeEventFunctions</name></member>
      <member refid="class_sleep_helper_1a841620a67c0f98bfee4e9808a8226c3d" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>wakeFunctions</name></member>
      <member refid="class_sleep_helper_1a790a2897f52fc755f752b1f76af94994" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>wakeOrBootFunctions</name></member>
      <member refid="class_sleep_helper_1ab99d26318ff9514a6db29adeb87bb18b" prot="protected" virt="non-virtual"><scope>SleepHelper</scope><name>whileConnectedFunctions</name></member>
      <member refid="class_sleep_helper_1a015eb8ec460526d1dd81b4859823aa7e" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withLoopFunction</name></member>
      <member refid="class_sleep_helper_1ab8889f82083eb26229ac096907218766" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withMaximumTimeToConnect</name></member>
      <member refid="class_sleep_helper_1a6e5222c45e18155a9de17cb4350a8fbc" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withMaximumTimeToConnectFunction</name></member>
      <member refid="class_sleep_helper_1a68ae8f2760ead87883343d1d418b977c" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withMinimumConnectedTime</name></member>
      <member refid="class_sleep_helper_1a69d89d9b33b53b09df85580c20e8dfd3" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withMinimumSoC</name></member>
      <member refid="class_sleep_helper_1a147c91d776b0968268e148b1be6958d0" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withNoConnectionFunction</name></member>
      <member refid="class_sleep_helper_1a805abcdae1dd42163191a9edcb69660f" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withSettingChangeFunction</name></member>
      <member refid="class_sleep_helper_1abf9f04100075adfc2a5ccd27a14db7de" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withSetupFunction</name></member>
      <member refid="class_sleep_helper_1aabfb4418f8fb006b50d8efff7edbee4d" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withShouldConnectFunction</name></member>
      <member refid="class_sleep_helper_1a4a1cebe9ec345713091bd3f623cb6985" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withSleepConfigurationFunction</name></member>
      <member refid="class_sleep_helper_1a48f3f028336fae8f9b7b56335a2af98f" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withSleepOrResetFunction</name></member>
      <member refid="class_sleep_helper_1ac73ffa2b764f716d9af9c7840e7c30e5" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withSleepReadyFunction</name></member>
      <member refid="class_sleep_helper_1aa293cbbab40d07245d2006a71f696e6f" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withTimeConfig</name></member>
      <member refid="class_sleep_helper_1a0d2ea01e4c0d13adc81c038b33ea8871" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withWakeEventFunction</name></member>
      <member refid="class_sleep_helper_1ac633b93687b39b6b9e5ce18caa205dff" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withWakeFunction</name></member>
      <member refid="class_sleep_helper_1a75d49d150a195cdd7ab8b9d01ef462f2" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withWakeOrBootFunction</name></member>
      <member refid="class_sleep_helper_1a0220bfedac1060b8246dff582426cb35" prot="public" virt="non-virtual"><scope>SleepHelper</scope><name>withWhileConnectedFunction</name></member>
      <member refid="class_sleep_helper_1af1640a7ac7d7ba028f468d14d495cbfb" prot="protected" virt="virtual"><scope>SleepHelper</scope><name>~SleepHelper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
