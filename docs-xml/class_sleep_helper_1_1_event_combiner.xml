<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_sleep_helper_1_1_event_combiner" kind="class" language="C++" prot="public">
    <compoundname>SleepHelper::EventCombiner</compoundname>
    <includes refid="_sleep_helper_8h" local="no">SleepHelper.h</includes>
    <innerclass refid="class_sleep_helper_1_1_event_combiner_1_1_event_info" prot="public">SleepHelper::EventCombiner::EventInfo</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_sleep_helper_1_1_event_combiner_1a9d35318dd25d2ea56a19d2df37c4a5e1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; JSONWriter &amp;, int &amp; &gt;</type>
        <definition>AppCallback&lt;JSONWriter &amp;, int &amp;&gt; SleepHelper::EventCombiner::callbacks</definition>
        <argsstring></argsstring>
        <name>callbacks</name>
        <briefdescription>
<para>Callback functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1069" column="21" bodyfile="src/SleepHelper.h" bodystart="1069" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1a348617cf948cdb5fd95e128e389cd4b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::EventCombiner::EventCombiner</definition>
        <argsstring>()</argsstring>
        <name>EventCombiner</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Use withCallback to add callback functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1009" column="9" bodyfile="src/SleepHelper.h" bodystart="1009" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1a93ec638d113802614d4265f87a53d2eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref> &amp;</type>
        <definition>EventCombiner &amp; SleepHelper::EventCombiner::withCallback</definition>
        <argsstring>(std::function&lt; bool(JSONWriter &amp;, int &amp;)&gt; fn)</argsstring>
        <name>withCallback</name>
        <param>
          <type>std::function&lt; bool(JSONWriter &amp;, int &amp;)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Adds a callback function to generate JSON data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref>&amp;</para>
</simplesect>
The callback function has this prototype:</para>
<para>bool callback(JSONWriter &amp;writer, int &amp;priority)</para>
<para>The return value is ignored; you should return true.</para>
<para>writer is the JSONWriter to store the data into priority should be set to a value from 1 to 100. If you leave it at zero your data will not be saved!</para>
<para>Items are added to the event in priority order, largest first.</para>
<para>If you have a priority &lt; 50 and the event is full, then your data will be discarded to avoid generating another event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1031" column="23" bodyfile="src/SleepHelper.h" bodystart="1031" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1a5171be18cc6a6652c2bc0dd3ed49800c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::EventCombiner::generateEvents</definition>
        <argsstring>(std::vector&lt; String &gt; &amp;events)</argsstring>
        <name>generateEvents</name>
        <param>
          <type>std::vector&lt; String &gt; &amp;</type>
          <declname>events</declname>
        </param>
        <briefdescription>
<para>Generate one or more events based on the maximum event size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of String objects to fill in with event data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The events vector you pass into this method will be cleared. It will be returned filled in with zero or more Strings, each containing event data in valid JSON format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1044" column="14" bodyfile="src/SleepHelper.cpp" bodystart="654" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1a747c855dbe719d2e8588c2eff34eb8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::EventCombiner::generateEvents</definition>
        <argsstring>(std::vector&lt; String &gt; &amp;events, size_t maxSize)</argsstring>
        <name>generateEvents</name>
        <param>
          <type>std::vector&lt; String &gt; &amp;</type>
          <declname>events</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSize</declname>
        </param>
        <briefdescription>
<para>generate one or more events based on desired size </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of String objects to fill in with event data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum size of each even in bytes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The events vector you pass into this method will be cleared. It will be returned filled in with zero or more Strings, each containing event data in valid JSON format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1055" column="14" bodyfile="src/SleepHelper.cpp" bodystart="661" bodyend="744"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1ab03dfe32d0a889b87b976dd2fa3db0d7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::EventCombiner::EventCombiner</definition>
        <argsstring>(const EventCombiner &amp;)=delete</argsstring>
        <name>EventCombiner</name>
        <param>
          <type>const <ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1062" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_event_combiner_1a73f14ab4f2a136283235bc7f8ff87e1b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref> &amp;</type>
        <definition>EventCombiner &amp; SleepHelper::EventCombiner::operator=</definition>
        <argsstring>(const EventCombiner &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sleep_helper_1_1_event_combiner" kindref="compound">EventCombiner</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="1067" column="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class to handle building JSON events from multiple callbacks with priority and the ability to generate multiple events if necessary. </para>
    </briefdescription>
    <detaileddescription>
<para>The idea is that you want to combine all of the data into a single event if possible to minimize data operations. Sometimes you have unimportant data that would be nice to include if there&apos;s space but omit if not. And sometimes you have important data that must be sent, and it&apos;s OK to send multiple events if necessary. </para>
    </detaileddescription>
    <location file="src/SleepHelper.h" line="978" column="5" bodyfile="src/SleepHelper.h" bodystart="978" bodyend="1071"/>
    <listofallmembers>
      <member refid="class_sleep_helper_1_1_event_combiner_1a9d35318dd25d2ea56a19d2df37c4a5e1" prot="protected" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>callbacks</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1a348617cf948cdb5fd95e128e389cd4b0" prot="public" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>EventCombiner</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1ab03dfe32d0a889b87b976dd2fa3db0d7" prot="protected" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>EventCombiner</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1a5171be18cc6a6652c2bc0dd3ed49800c" prot="public" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>generateEvents</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1a747c855dbe719d2e8588c2eff34eb8cb" prot="public" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>generateEvents</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1a73f14ab4f2a136283235bc7f8ff87e1b" prot="protected" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>operator=</name></member>
      <member refid="class_sleep_helper_1_1_event_combiner_1a93ec638d113802614d4265f87a53d2eb" prot="public" virt="non-virtual"><scope>SleepHelper::EventCombiner</scope><name>withCallback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
