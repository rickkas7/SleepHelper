<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_sleep_helper_1_1_settings_file" kind="class" language="C++" prot="public">
    <compoundname>SleepHelper::SettingsFile</compoundname>
    <basecompoundref refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex" prot="public" virt="non-virtual">SleepHelper::SleepHelperRecursiveMutex</basecompoundref>
    <derivedcompoundref refid="class_sleep_helper_1_1_cloud_settings_file" prot="public" virt="non-virtual">SleepHelper::CloudSettingsFile</derivedcompoundref>
    <includes refid="_sleep_helper_8h" local="no">SleepHelper.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_sleep_helper_1_1_settings_file_1aa173313f625c381fc9e2cefc3cb1306d" prot="protected" static="no" mutable="no">
        <type>JsonParserStatic&lt; particle::protocol::MAX_EVENT_DATA_LENGTH, 50 &gt;</type>
        <definition>JsonParserStatic&lt;particle::protocol::MAX_EVENT_DATA_LENGTH, 50&gt; SleepHelper::SettingsFile::parser</definition>
        <argsstring></argsstring>
        <name>parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="489" column="26" bodyfile="src/SleepHelper.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1_1_settings_file_1ad51309909967dae8f9b7062e9173c47f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_sleep_helper_1_1_app_callback" kindref="compound">AppCallback</ref>&lt; const char * &gt;</type>
        <definition>AppCallback&lt;const char *&gt; SleepHelper::SettingsFile::settingChangeFunctions</definition>
        <argsstring></argsstring>
        <name>settingChangeFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="491" column="21" bodyfile="src/SleepHelper.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1_1_settings_file_1aaaab1493e82be7c15a62a98b3180f5a8" prot="protected" static="no" mutable="no">
        <type>String</type>
        <definition>String SleepHelper::SettingsFile::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="492" column="16" bodyfile="src/SleepHelper.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sleep_helper_1_1_settings_file_1aa496babc997844677026805acf56a0fa" prot="protected" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* SleepHelper::SettingsFile::defaultValues</definition>
        <argsstring></argsstring>
        <name>defaultValues</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="493" column="20" bodyfile="src/SleepHelper.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a99e4341f16fead8656eec1c2c58aa53c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::SettingsFile::SettingsFile</definition>
        <argsstring>()</argsstring>
        <name>SettingsFile</name>
        <briefdescription>
<para>Default constructor. Use <ref refid="class_sleep_helper_1_1_settings_file_1aa8df129856d5796956f36ac93ee7e228" kindref="member">withPath()</ref> to set the pathname if using this constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="288" column="9" bodyfile="src/SleepHelper.h" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a870fcfe0e33c8bc5c2e5f3c9cec3aac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SleepHelper::SettingsFile::~SettingsFile</definition>
        <argsstring>()</argsstring>
        <name>~SettingsFile</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="293" column="17" bodyfile="src/SleepHelper.h" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1aa8df129856d5796956f36ac93ee7e228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        <definition>SettingsFile &amp; SleepHelper::SettingsFile::withPath</definition>
        <argsstring>(const char *path)</argsstring>
        <name>withPath</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Sets the path to the settings file on the file system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="301" column="22" bodyfile="src/SleepHelper.h" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a81454575654c03f7888717305d480db1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        <definition>SettingsFile &amp; SleepHelper::SettingsFile::withDefaultValues</definition>
        <argsstring>(const char *defaultValues)</argsstring>
        <name>withDefaultValues</name>
        <param>
          <type>const char *</type>
          <declname>defaultValues</declname>
        </param>
        <briefdescription>
<para>Default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>defaultValues</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="312" column="22" bodyfile="src/SleepHelper.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a377febb03172255a6c3254c66b2369c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        <definition>SettingsFile &amp; SleepHelper::SettingsFile::withSettingChangeFunction</definition>
        <argsstring>(std::function&lt; bool(const char *)&gt; fn)</argsstring>
        <name>withSettingChangeFunction</name>
        <param>
          <type>std::function&lt; bool(const char *)&gt;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Register a function to be called when a settings value is changed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>a function or lamba to call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="323" column="22" bodyfile="src/SleepHelper.h" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a4dde1ae6b6af0a60a45efa41f973fd5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SleepHelper::SettingsFile::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>Initialize this object for use in <ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used from SleepHeler::setup(). You should not use this if you are creating your own <ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> object; this is only used to hook this class into SleepHelper/ </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="333" column="14" bodyfile="src/SleepHelper.cpp" bodystart="212" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a86c1223740ecac78d495172d4a86c9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::load</definition>
        <argsstring>()</argsstring>
        <name>load</name>
        <briefdescription>
<para>Load the settings file. You normally do not need to call this; it will be loaded automatically. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="341" column="14" bodyfile="src/SleepHelper.cpp" bodystart="215" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a5401ec9133ebafbd46642fb7db71c51f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::save</definition>
        <argsstring>()</argsstring>
        <name>save</name>
        <briefdescription>
<para>Save the settings file. You normally do not need to call this; it will be saved automatically. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="349" column="14" bodyfile="src/SleepHelper.cpp" bodystart="247" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a6efa28ca49cf9973bb1c3b9f7a34da21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::getValue</definition>
        <argsstring>(const char *name, T &amp;value) const</argsstring>
        <name>getValue</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get a value from the settings file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
The values are cached in RAM, so this is normally fast. Note that you must request the same data type as the original data in the JSON file - it does not coerce types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="364" column="10" bodyfile="src/SleepHelper.h" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a38d7d6a31e354cce408c333657913c40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::setValue</definition>
        <argsstring>(const char *name, const T &amp;value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value of a key to a bool, int, double, or String value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
This call returns quickly if the value does not change and does not write to the file system if the value is unchanged.</para>
<para>You should use the same data type as was originally in the JSON data beacause the change detection does not coerce data types. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="388" column="10" bodyfile="src/SleepHelper.h" bodystart="388" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1ae4b2d54313df57febc06cb1bdea0a556" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::setValue</definition>
        <argsstring>(const char *name, const char *value)</argsstring>
        <name>setValue</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of a key to a constant string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
This call returns quickly if the value does not change.</para>
<para>This specific overload is required because the templated version above can&apos;t get the value to see if it changed into a const char *. Making a copy of it in a string solves this issue. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="425" column="10" bodyfile="src/SleepHelper.h" bodystart="425" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1adeca5f5202727cb3685c27e8f0bb64c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::setValuesJson</definition>
        <argsstring>(const char *json)</argsstring>
        <name>setValuesJson</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Set value to the specified JSON, replacing the existing settings. Calls update callbacks if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="438" column="14" bodyfile="src/SleepHelper.cpp" bodystart="262" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a9bd1293818afc254c72e2da63446f42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::updateValuesJson</definition>
        <argsstring>(const char *json)</argsstring>
        <name>updateValuesJson</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Merges multiple values from JSON data into the settings. Calls update callbacks if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
This is a merge; values that are not included in json but already exist in the settings will be left unchanged. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="450" column="14" bodyfile="src/SleepHelper.cpp" bodystart="324" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a27e1b6f1830abc75e1e990656c6c125c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::addDefaultValues</definition>
        <argsstring>(const char *inputJson)</argsstring>
        <name>addDefaultValues</name>
        <param>
          <type>const char *</type>
          <declname>inputJson</declname>
        </param>
        <briefdescription>
<para>Merge in default values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputJson</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
This is like updateValuesJson but only updates the values from inputJson if the value does not already exist in the settings. This allows the initial set of default settings to be created. It&apos;s also used on every load, so if you add a new default setting in defaultValues, then that value will be added to the settings. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="464" column="14" bodyfile="src/SleepHelper.cpp" bodystart="389" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1af2f81934694c6c82e10f5c1d4a577f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SleepHelper::SettingsFile::getValuesJson</definition>
        <argsstring>(String &amp;json)</argsstring>
        <name>getValuesJson</name>
        <param>
          <type>String &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Get all of the current settings as a JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false</para>
</simplesect>
If you are getting a single value you should use getValue instead. This method is used so the cloud can get all settings from a calculated variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="476" column="14" bodyfile="src/SleepHelper.cpp" bodystart="440" bodyend="454"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1a9d206ef93d7bed231f85e6ec10c9f393" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SleepHelper::SettingsFile::SettingsFile</definition>
        <argsstring>(const SettingsFile &amp;)=delete</argsstring>
        <name>SettingsFile</name>
        <param>
          <type>const <ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="482" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_sleep_helper_1_1_settings_file_1af3cdb2e1347e544be021cc3f3849b612" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        <definition>SettingsFile &amp; SleepHelper::SettingsFile::operator=</definition>
        <argsstring>(const SettingsFile &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This class cannot be copied </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SleepHelper.h" line="487" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for managing the <ref refid="class_sleep_helper" kindref="compound">SleepHelper</ref> settings file. </para>
    </briefdescription>
    <detaileddescription>
<para>You must not access the settings file at global constructor time. Only use it from <ref refid="class_sleep_helper_1_1_settings_file_1a4dde1ae6b6af0a60a45efa41f973fd5d" kindref="member">setup()</ref> or later. You can access it from worker threads.</para>
<para>Settings are limited to the size of a publish, function, or variable data payload, typically 1024 bytes on Gen 3 devices.</para>
<para>If you have more data than that, you should store it in your own file. You can also create more than one <ref refid="class_sleep_helper_1_1_settings_file" kindref="compound">SettingsFile</ref> object for your own settings, but it won&apos;t be connected to the built-in function and variable support. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>SleepHelper::CloudSettingsFile</label>
        <link refid="class_sleep_helper_1_1_cloud_settings_file"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>SleepHelper::SettingsFile</label>
        <link refid="class_sleep_helper_1_1_settings_file"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SleepHelper::SleepHelperRecursiveMutex</label>
        <link refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>SleepHelper::SettingsFile</label>
        <link refid="class_sleep_helper_1_1_settings_file"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>SleepHelper::SleepHelperRecursiveMutex</label>
        <link refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex"/>
      </node>
    </collaborationgraph>
    <location file="src/SleepHelper.h" line="283" column="5" bodyfile="src/SleepHelper.h" bodystart="283" bodyend="494"/>
    <listofallmembers>
      <member refid="class_sleep_helper_1_1_settings_file_1a27e1b6f1830abc75e1e990656c6c125c" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>addDefaultValues</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1aa496babc997844677026805acf56a0fa" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>defaultValues</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1a3c9e1311d1d26a58afb1c8f8d32fcf69" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>dispose</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a6efa28ca49cf9973bb1c3b9f7a34da21" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>getValue</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1af2f81934694c6c82e10f5c1d4a577f8e" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>getValuesJson</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a86c1223740ecac78d495172d4a86c9f8" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>load</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1ae36dee79d37ac9610cd4c76c845c5386" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>lock</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1af3cdb2e1347e544be021cc3f3849b612" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>operator=</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1aa173313f625c381fc9e2cefc3cb1306d" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>parser</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1aaaab1493e82be7c15a62a98b3180f5a8" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>path</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a5401ec9133ebafbd46642fb7db71c51f" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>save</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1ad51309909967dae8f9b7062e9173c47f" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>settingChangeFunctions</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a99e4341f16fead8656eec1c2c58aa53c" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>SettingsFile</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a9d206ef93d7bed231f85e6ec10c9f393" prot="protected" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>SettingsFile</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a4dde1ae6b6af0a60a45efa41f973fd5d" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>setup</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a38d7d6a31e354cce408c333657913c40" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>setValue</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1ae4b2d54313df57febc06cb1bdea0a556" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>setValue</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1adeca5f5202727cb3685c27e8f0bb64c2" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>setValuesJson</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1af25f1073f79d12bb4f57a7c1f6629aa8" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>SleepHelperRecursiveMutex</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1acb7f25e9fab9e82496908e5726b7e812" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>SleepHelperRecursiveMutex</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1a6a1f53c6f4b467ddfd988d8defd8c478" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>try_lock</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1a34bb756e26a98c673610396cbf06e7b7" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>trylock</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1ad89bbb20eae4ef07b147fe69f688c765" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>unlock</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a9bd1293818afc254c72e2da63446f42c" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>updateValuesJson</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a81454575654c03f7888717305d480db1" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>withDefaultValues</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1aa8df129856d5796956f36ac93ee7e228" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>withPath</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a377febb03172255a6c3254c66b2369c9" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>withSettingChangeFunction</name></member>
      <member refid="class_sleep_helper_1_1_settings_file_1a870fcfe0e33c8bc5c2e5f3c9cec3aac4" prot="public" virt="virtual"><scope>SleepHelper::SettingsFile</scope><name>~SettingsFile</name></member>
      <member refid="class_sleep_helper_1_1_sleep_helper_recursive_mutex_1aaeecb1cb2dea4299c77275757cb69016" prot="public" virt="non-virtual"><scope>SleepHelper::SettingsFile</scope><name>~SleepHelperRecursiveMutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
